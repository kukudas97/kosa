<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<!--객체의 생성과 조립-->
<!-- id="" 객체의 이름 >> web에서는 url경로로 바뀜-->
<!-- 
1. Tomcat실행
2. 클라이언트 요청 hello.do...
3. spring에서 <url-pattern>*.do</url-pattern>설정에 따라서
	3.1 DispatcherServlet 객체 생성 >> KEY Spring이 DispatcherServlet 가지고 놀 수 있는 IOC컨테이너가 자동생성
	3.2 spring-servlet.xml read 해서 >> IOC컨테이너 안에 >> bean객체 생성 조립
	3.3  약속(*-servlet.xml)으로 >> spring-servlet.xml(이름을 만들때 web.xml에 servlet-name과 같다면 자동생성) 
4. 컨테이너 안에 객체가 생성되고 주입이 되어 있음
5. hello.do 에 대해서 handler mapping작업 >> 실행할 객체를 찾음 >> id="/hello.do" >> handleRequest함수 자동 실행
6. handleRequest return >> ModelAndView 객체 >> ViewResolver 조합 >> view리턴...

 -->
 	<context:annotation-config/>
	<context:component-scan base-package="com.service"></context:component-scan>
	<bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
	
	<!--TEST 1-->
	<bean id="helloController" class="com.controller.HelloController"></bean>
	
	<!-- TEST2 -->
	<!-- 
		하나의 요청 주소(전송방식) get, post
		화면, 서비스 처리 나누기
	 -->
	 <bean class="com.controller.NewArticleController"></bean>
	 <bean class="com.service.ArticleService"></bean>
	 
	 <!-- TEST3 parameter List<OrderItem> -->
	 <bean class="com.controller.OrderController"></bean>
	 
	 <!-- TEST4 requestparam -->
	 <bean class="com.controller.SearchController"></bean>
	 
	 <!-- TEST5 cookie -->
	 <bean class="com.controller.CookieController"></bean>
	 
	  <!--  TEST_6 파일 업로드 -->
	 <!--  

		import org.springframework.web.multipart.commons.CommonsMultipartResolver;
		import org.springframework.web.multipart.commons.CommonsMultipartFile;

		CommonsMultipartFile 사용해서  업로드를 할려면 몇가지 기본 세팅
        
        CommonsMultipartResolver  : 업로드한 파일에 대한 정보 관리(크기 , 이름....)

		파일 처리 (의존 객체)
		//C:\KOSA_IT\Spring\Framework\spring-framework-3.0.2.RELEASE-dependencies\org.apache.commons\com.springsource.org.apache.commons.fileupload\1.2.0
		com.springsource.org.apache.commons.fileupload-1.2.0.jar
		com.springsource.org.apache.commons.io-1.4.0.jar

		CommonsMultipartResolver  : 업로드한 파일에 정보 관리(크기 , 이름  , 중복이름 정책)
-->
	 <bean class="com.controller.ImageController"></bean>

     <bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
     		<property name="maxUploadSize" value="1048760"></property>
     		<property name="defaultEncoding" value="UTF-8"></property>
     </bean>
	<!--
		<property name="uploadTempDir" value="uploadTempDir"/>
		<bean id="uploadTempDir" class="org.springframework.core.io.FileSystemResource">
		<constructor-arg value="c:/temp/"/>
		</bean>
	-->
</beans>